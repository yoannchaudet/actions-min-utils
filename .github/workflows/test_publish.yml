# Run the tests and publish the NuGet package
# Inspiration: https://www.meziantou.net/publishing-a-nuget-package-following-best-practices-using-github.htm

name: Test & Publish
on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Publish the NuGet package'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NUGET_DIRECTORY: ${{ github.workspace}}/nuget
  CONFIGURATION: Release

defaults:
  run:
    shell: pwsh

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Test
        run: dotnet test --configuration ${{ env.CONFIGURATION }} --logger:trx
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/TestResults/*.trx

  pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Create the NuGet package in the folder from the environment variable NuGetDirectory
      - run: dotnet pack ActionsMinUtils --configuration ${{ env.CONFIGURATION }} --output ${{ env.NUGET_DIRECTORY }}

      # Publish the NuGet package as an artifact, so they can be used in the following jobs
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NUGET_DIRECTORY }}/*.nupkg

  validate_package:
    runs-on: ubuntu-latest
    needs: [pack]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_DIRECTORY }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NUGET_DIRECTORY }}/*.nupkg")

  deploy:
    # Publish only when creating a GitHub Release or explicitly in a workflow_dispatch
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy)

    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: [validate_package, test]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_DIRECTORY }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NUGET_DIRECTORY }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source "https://api.nuget.org/v3/index.json" --skip-duplicate
          }
